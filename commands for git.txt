	Базові команди для git.

git init - створює репозиторій.
Приклад: mkdir name-dir - створює папку.
		 cd name-dir - заходить в неї.
		 echo Hello World > test.txt - створює файл з текстом Hello World.
		 git init - створює репозиторій з папки name-dir.
		 
-------------------------------------------------------------------------------
		 
git add - індексація змін в вже дабавлених файлах,
		  або додавання нових файлів для відстежування гітом.
Приклад: git add test.txt - індексує файл test.txt, або додає його для відстежування.
		 git add *.txt - індексує всі файли з розширенням .txt
		 git add . індексує всі файли.
		 
-------------------------------------------------------------------------------
		 
git status - стан проекту, виводить змінені (не проіндексовані),
			 не добавлені і проіндексовані файли.
			 
-------------------------------------------------------------------------------
			 
git commit - робить комміт. Робить відбиток (знімок) файлів
			 на основі індексації.
			 
git commit -a - робить комміт і автоматично робть індексацію, 
				але нові файли при цьому індексуватися не будуть.
				Видалення файлів буде враховано.

git commit -m "comment" - додає коментар.

git commit test.txt - вносить в індекс і робить комміт на основі
					  єдиного файлу.
					  
-------------------------------------------------------------------------------
	
git diff - покаже зміни не внесені в індекс (staged).
		   Приклад: Якщо файл був проіндексований (git add),
           а потім ви щось змінили, то git diff покаже різницю 
		   між файлом теперішнім і на момент останньої індексації.
		   
git diff --cached - зміни внесені в індекс (проіндексовані). 
				Навіть, якщо ви зробили декілька індексацій (git add), 
				то (git diff --cached) виведе зміни зроблені
				між останнім коммітом і останньою індексацією.
					 
git diff HEAD - зміни в проекті в порівнянні з останнім комітом, 
				включаючи проіндексовані і не проіндексовані.

git diff HEAD^ - зміни з передостаннім комітом.

git diff master..test-branch - порівнює "голови" гілок master і test-branch.

git diff master - порівнює дану гілку з master, або якоюсь іншою.

-------------------------------------------------------------------------------

git reset - відміняє всі індексації до останнього комміта.
			всі змінені і нові файли будуть в статусі (git status) -
			не проіндексованих.
			
git reset HEAD - те саме що і просто git reset.
			
git reset test.txt - видаляє з індекса конкретний файл.
					 В даному випадку test.txt
					 
git reset --soft HEAD^ - видалить останній комміт при цьому індекси і 
						 файли будуть такими, як беспосередньо перед коммітом.
						 Тобто, якщо зробити комміт ще раз, то нічого не поміняється.
						 
						 git commit -c ORIG_HEAD - після м'ягкого ресета(soft), 
						 вертає видалений комміт і виводить редактор для редагування 
						 коментаря.
						 (Нафіга не відомо, можна просто зробити новий комміт).
						 
						 git commit -C ORIG_HEAD - те саме, коментар залишається незмінним.
					 
git reset --hard HEAD~1 видалить останній комміт (назавжди) 
						разом з індексами і змінами в самомих файлах.
						Тобто файли будуть такими як в передостанньому
						комміті. (Якщо замість 1 поставити 2 або 3, то
						відповідно видалить 2-ва або 3-ри останніх комміти).
						
-------------------------------------------------------------------------------						
						
git revert HEAD - створює новий комміт і накладує зворотні зміни від останнього коміта.
				  При цьому поточний комміт залишається.
				  
-------------------------------------------------------------------------------				  
				  
git log - виводить список коммітів починаючи з останнього 
		  з інформацією - автор, дата, коментар, контрольна сума.
		  
git log -p - показує різницю внесену кожним коммітом.

git log -2 - покаже останні два комміта. 
			(Обмежує кількість виведених коммітів).

git log -U1 --word-diff - показує зміни по словах. Добавлені сдова 
						беруться в + + (+слово+), а видалені в - - (-слово-).
						
git log --stat - отримання статистики. Показує скільки файлів змінювалося,
				а також кількість добавлених (insertions(+)) і 
				видалених (deletions(-))рядків в цих файлах.
				
git log --pretty=oneline - виводить комміт одним рядком.
						Також можна використовувати (замість oneline)
						short, full, fuller - для виводу більше, або
						менше деталей.
						
git log --pretty=format:"%h-%an,%ar:%s" - можна задати власний формат. Де:
						%h - скорочений хеш.
						%an - Ім'я автора.
						%ar - Відносна дата, скільки часу пройшло з момениу комміту.
						%s - коментар.
						
git log --since=2weeks - комміти за два останні тижня.

git log --since="2015-08-29" - комміти за конкретну дату.

git log --since="2 years 1 days 3 minutes ago" - відносна дата. Комміти від 
												відносної дати і до тепер.
												
git log --author Nazar - по авторам.

git log --grep word - по ключовим словам (вірніше слові, в цьому випадку word).

git log --since=«2 hours» README - комміти по конкретному файлі до двох годин.

-------------------------------------------------------------------------------

git grep - пошук слів по проекту.

git grep word- пошук слова word в проекті.

git grep -c word - підрахувати кількість згадувань слова word в проекті.

git grep -e "first" --and -e "another" - шукає рядки, де знаходяться обидва слова.

git grep --all-match -e "first" -e "second" - шукає рядки, де знаходяться
								хоча би одне з слів. (працює не коректно).
								
-------------------------------------------------------------------------------

git branch - виводить список гілок на локальному сервері і відмічає активну.

git branch -r - виводить гілки на сервері.

git branch -a - виводить всі гілки (локальні і віддалені).

git branch -v - виводить гілки з останніми коммтами і коментарями.

git branch new-branch - створює нову гілку new-branch.

git branch -d new-branch - видалить гілку, якщо ця була злита (merge) з розв'язанням
						можливих конфліктів в поточну гілку.
						
git branch -D new-branch - видалить гілку в любому випадку.

git branch -m new-name-branch - переіменує гілку.

-------------------------------------------------------------------------------

git checkout - переключає між гілками. Наприклад git checkout new-branch - 
				переходить на гілку new-branch.

git checkout -b new-branch - створює нову гілку (new-branch) і переходить на неї.
							Ця команда можлива, тільки якщо всі зміни закомічені.
							
* git checkout -f new-branch - примусове створення нової гілки, при не закоммічених 
							змінах. Всі не закомічені зміни будуть втрачені.
							
* git checkout -m new-branch - створює нову гілку але перед тим робить комміт,
							щоб зберегти не закомічені зміни.

git checkout HEAD~2 somefile - вертає somefile достану на два комміта назад.

-------------------------------------------------------------------------------

git merge - злиття гілок.

git merge new-future - попробує злити поточну гілку з new-future.

-------------------------------------------------------------------------------

git rm test.txt - видаляє файл test.txt повністю і з комп'ютера і з гіта. 
				  Видалення попаде в індекс.
				  
git rm --cached test.txt - видаляяє файл з гіт, але залишає на комп'ютері. 
							Тобто файл буде виводитися як не контрольований (untracked).
							
-------------------------------------------------------------------------------

git mv test.txt new-name.txt - переіменовує файли. З test.txt на new-name.txt

-------------------------------------------------------------------------------

git clone https://github.com ... - клонує рерозиторій з github по URL адресі.
								Якщо після цієї команди через пробіл дадати назву
								папки, яку ми хочем наприклад my-project, то репозиторій
								буде в папці з назвою my-project.

-------------------------------------------------------------------------------

git pull - забирає зміни з відаленого репозиторія і проводить злиття цих змін 
			з активною гілкою.
			
-------------------------------------------------------------------------------

git remote - виводить список віддалених сховищ (репозиторіїв). (Ще не докінця зрозумів).

* git remote -v - виводить посилання на ці сховища.

* git remote add [repo] [link] - додає віддалене сховище. 
							([repo] ім'я сховища [link] посилання)
							
git remote rename name-repo new-name-repo - переіменовує віддалений репозиторій, але тільки
										   локально на сервері залишається стара назва.(?)
											В даному випадку name-repoна на new-name-repo.
											
git remote rm repo - "видаляє" віддалений сервер.
											
git fetch - отримує дані з віддаленого сховищана, але на відміну від git pull
			незливає зразу з вашою роботою і незмінює файли (стягує зміни на свою гілку).
			Ці зміни можна	потім замержити вручну.
			
* git fetch name-repo - стягує інформацію з репозиторія name-repo до себе в сховище.
					А також створює нову локальну гілку repo/master, яку
					можна злити (merge) з іншою, або лишити її.

-------------------------------------------------------------------------------

git push - штовхає зміни на сервер. Якщо хтось зробив зміни на сервері, то спочатку
		   потрібно зробити git pull або git fetch.

git push [ім’я сховища] [ім’я гілки] - наприклад  git push origin master - штовхає
									  гілку master на сервер origin
-------------------------------------------------------------------------------

git tag - виводить список позначок. Зазвичай створюються, щоб відзначити релізи.

git tag -a v1.4 -m "my version v1.4" - створює анотовану(з інформацією - автор,
										дата, коментар ...) позначку.
										
git push origin v1.4 - штовхає позначку v1.4 на сервер. Замість імені позначки 
						можна написати --tags тоді запушаться всі позначки.

-------------------------------------------------------------------------------

git stash - приховує незавершену роботу. Наприклад ви зробили зміни в проекті і 
			добавили в індекс, але ще не хочете коммітити незавершену роботу,
			а потрібно переключитись на іншу, замість комміта використовують 
			приховування, до якого можна вернутися.
			
git stash list - виводить список прихованого.

git stash apply - вертає проект в стан на момент останнього приховування.
				Якщо було декілька приховувань, то потрібно добавити @{1},
				або іншу цифру замість 1 (див. в git stash list).
				Наприклад - git stash apply@{2}
				
git stash drop stash@{0} - видаляє приховування.

git stash pop - приміняє сховані зміни і відразу видаляє приховування. 

git stash branch testchange - створює нову гілку на основі приховування.
							Гілка робиться з останнього комміта перед приховуванням
							і на ній зберігаються версія на момент приховування.

-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
.gitignore - (доредагую пізніше) для того щоб git ігнорував файли, які не потрібно відстежувати
			і не показував в невідстежуваних в корені створюється файл .gitignore
			в якому записуються файли, які потрібно ігнорити.
			Рядки які починаються з # не враховуються і використовують для коментів.
			Приклади:
			
			# Ніяких файлів з розширенням .a 
			*.a

			# Проте відстежувати lib.a, хоч ми й ігноруємо .a файли вище
			!lib.a

			# Ігнорувати тільки файл TODO у корені, не в інших теках
			/TODO

			# Ігнорувати усі файли в теці build/
			build/

			# Ігнорувати усі .txt файли в теці doc/
			doc/**/*.txt

-------------------------------------------------------------------------------

* - не перевіряв як працює, або не до кінця в'їхав.