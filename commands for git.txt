Команди для git.

Інформація є не точною і повністю не перевірена.
-------------------------------------------------------------------------------------------------------------------------------
реєстрація

git config --global user.name "Nazar-bnm"

git config --global user.email nazar.bnm@gmail.com

git config --global --list - показує список даних користувача (user.name user.email ...)
-------------------------------------------------------------------------------------------------------------------------------
git help <команда> - підказки по командам (або git <команда> --help).
-------------------------------------------------------------------------------------------------------------------------------
git init name-dir - створює локальний репозиторій з папки name-dir.
-------------------------------------------------------------------------------------------------------------------------------
git add - індексація змін в вже дабавлених файлах, або додавання нових файлів для відстежування гітом.

Приклади: git add test.txt - індексує файл test.txt, або додає його для відстежування.
		  git add *.txt - індексує всі файли з розширенням .txt в даній папці.
		  git add "*.txt" - індексує всі файли з розширенням .txt в цілому проекті.
		  git add . - індексує всі файли (або git add --all)
		  git add docs/*.txt - індексує всі файли з розширенням .txt в папці docs.
-------------------------------------------------------------------------------------------------------------------------------

git status - стан проекту: виводить змінені (не проіндексовані), не добавлені і проіндексовані файли.
			 (перевіряє які зміни відбулися, порівняно з останнім комітом.)

-------------------------------------------------------------------------------------------------------------------------------

git commit -m "comment" - робить коміт - відбиток (знімок) файлів, на основі індексації.(comment - коментар коміту).

git commit -am "comment" - робить комміт і автоматично робть індексацію, але нові файли при цьому індексуватися не будуть.
				Видалення файлів буде враховано.

git commit test.txt - вносить в індекс і робить комміт на основі єдиного файлу.
					  
git commit --amend - змінює останній коміт:
					- якщо потрібно змінити тільки комент коміту, просто вводиться команда. (виводить вім, 
					в верхній стрічці переписується комент, щоб вийти з реактора - q потім :х)

					- якщо потрібно змінити сам коміт, добавити, видалити чи змінити файли, то перед цією командою,
					потрібно, добавити зміни в індекс (git add, або git rm для видалення з індексу), а вже потім
					ввести команду git commit --amend, яка змінить останній коміт на основі цього індексу.

					! Не варто робити, якщо вже кудась відправив останній коміт.

-------------------------------------------------------------------------------------------------------------------------------

git log - виводить список коммітів починаючи з останнього з інформацією - автор, дата, коментар, контрольна сума.
		  
git log -p - показує різницю внесену кожним коммітом.

git log -2 - покаже останні два комміта. (Обмежує кількість виведених коммітів).

git log -U1 --word-diff - показує зміни по словах. Добавлені сдова беруться в + + (+слово+), а видалені в - - (-слово-).
						
git log --stat - отримання статистики. Показує скільки файлів змінювалося, а також кількість добавлених (insertions(+)) і 
				видалених (deletions(-))рядків в цих файлах.
				
git log --pretty=oneline - (git log --oneline) - виводить комміт одним рядком.
						Також можна використовувати (замість oneline) short, full, fuller - для виводу більше, або
						менше деталей.
						
git log --pretty=format:"%h-%an,%ar:%s" - можна задати власний формат. Де:
						%h - скорочений хеш.
						%an - Ім'я автора.
						%ar - Відносна дата, скільки часу пройшло з момениу комміту.
						%s - коментар.
						
git log --since=2weeks - комміти за два останні тижня.

git log --since="2015-08-29" - комміти за конкретну дату.

git log --since="2 years 1 days 3 minutes ago" - відносна дата. Комміти від відносної дати і до тепер.
												
git log --author Nazar-bnm - по авторам.

git log --grep word - по ключовим словам (вірніше слові, в цьому випадку word).

git log --since=«2 hours» README - комміти по конкретному файлі до двох годин.

-------------------------------------------------------------------------------------------------------------------------------

git diff - покаже зміни не внесені в індекс (staged).
		   Приклад: Якщо файл був проіндексований (git add), а потім ви щось змінили, то git diff покаже різницю,
		   між файлом теперішнім і на момент останньої індексації.
		   
git diff --cached - зміни внесені в індекс (проіндексовані). Навіть, якщо ви зробили декілька індексацій (git add), 
					то (git diff --cached) виведе зміни зроблені між останнім коммітом і останньою індексацією.
					 
git diff HEAD - зміни в проекті в порівнянні з останнім комітом, включаючи проіндексовані і не проіндексовані.

git diff HEAD^ - зміни з передостаннім комітом.

git diff master..test-branch - порівнює "голови" гілок master і test-branch.

git diff master - порівнює дану гілку з master, або якоюсь іншою.

-------------------------------------------------------------------------------------------------------------------------------

git reset - відміняє всі індексації до останнього комміта. Всі змінені і нові файли будуть в статусі (git status) -
			не проіндексованих.
			
git reset HEAD - те саме що і просто git reset. Якщо добавити ^ то верне до передостаннього комміта.
			
git reset test.txt - видаляє з індекса конкретний файл.
					 
git reset --soft HEAD^ - видалить останній комміт при цьому індекси і файли будуть такими, як беспосередньо перед коммітом.
						 Тобто, якщо зробити комміт ще раз, то нічого не поміняється.
						 
git commit -c ORIG_HEAD - після м'ягкого ресета(soft), вертає видалений комміт і виводить редактор для редагування коментаря.
						 ! Вертає тільки останній комміт, тобто якщо було стерто декілька коммітів, то верне тільки верхній. 
						 Як вернути всі див. нижче.
											 
git commit -C ORIG_HEAD- те саме, коментар залишається незмінним.
						 
git reset --soft HEAD~2 - видалить два останні комміти. При цьому файли будуть виводитися як проіндексовані (git status).
						  Так як це м'який рісет, то можна вернутись назад командою:

git reset --hard HEAD@{1} - верне всі видалені комміти. ! Тільки якщо вони видалені попередньою командою (soft).
					 
git reset --hard HEAD~1 видалить останній комміт (назавжди) разом з індексами і змінами в самомих файлах.
						Тобто файли будуть такими як в передостанньому комміті. 
						(Якщо замість 1 поставити 2 або 3, то відповідно видалить 2-ва або 3-ри останніх комміти).

-------------------------------------------------------------------------------------------------------------------------------

git revert HEAD - створює новий комміт і накладує зворотні зміни від останнього коміта. При цьому поточний комміт залишається.

-------------------------------------------------------------------------------------------------------------------------------

git grep - пошук слів по проекту.

git grep word- пошук слова word в проекті.

git grep -c word - підрахувати кількість згадувань слова word в проекті.

git grep -e "first" --and -e "another" - шукає рядки, де знаходяться обидва слова.

git grep --all-match -e "first" -e "second" - шукає рядки, де знаходяться хоча би одне з слів. 

! Працює не коректно.

-------------------------------------------------------------------------------------------------------------------------------

git branch - виводить список гілок на локальному сервері і відмічає активну.

git branch -r - виводить гілки на сервері.

git branch -a - виводить всі гілки (локальні і віддалені).

git branch -v - виводить гілки з останніми коммтами і коментарями.

git branch new-branch - створює нову гілку new-branch.

git branch -d new-branch - видалить гілку, якщо ця була злита (merge) з розв'язанням можливих конфліктів в поточну гілку.
						
git branch -D new-branch - видалить гілку в любому випадку.

git branch -m new-name-branch - переіменує гілку.

git branch --merged - показує гілки, які вже злиті (замержені)з тою гілкою на якій знаходимся. (Злиті гілки можна видаляти).
						
git branch --no-merged	- показує гілки, які ще не злиті (не замержені)з тою гілкою на якій знаходимся. 

-------------------------------------------------------------------------------------------------------------------------------

git checkout - переключає між гілками. Наприклад git checkout new-branch - переходить на гілку new-branch.

git checkout master^ - переключається на один коміт назад, буде вказувати на коміт, а не на гілку.
						(!!! не те саме, що і git checkout HEAD^ - чому поки не розумію).

					   ! Detached HEAD (відокремлена голова) просто означає що HEAD посилається на коміт, а не на якусь гілку.

git checkout C1 - переключається на коміт С1 - (C1 - це hash коміта, можна перейти зразу з любої гілки)

git checkout -b new-branch - створює нову гілку (new-branch) і переходить на неї.
							 Ця команда можлива, тільки якщо всі зміни закомічені.
							
git checkout -f new-branch - примусове створення нової гілки, при не закоммічених змінах. 
							 ! Всі не закомічені зміни будуть втрачені.
							
git checkout -m new-branch - створює нову гілку але перед тим робить комміт, щоб зберегти не закомічені зміни.

git checkout HEAD~2 somefile - вертає somefile достану на два комміта назад.

git checkout --test.txt - якщо файл був проіндексований, а потім змінений, то ця команда вертає стан файлу назад до індексації.

-------------------------------------------------------------------------------------------------------------------------------

git merge new-future - попробує злити гілку new-future з поточною.

-------------------------------------------------------------------------------------------------------------------------------

git rebase master - заливає собі відсутні коміти з гілки master.(потрібно уточнити)

git rebase --abort - відміняє процес rebase, при винекнні конфліктів.

git rebase --continue - продовжує rebase, після вирішення конфліктів і індексації (git add).

git rebase -i HEAD~3 - використовується для зміни комітів, в даному випадку для трьох останніх.
					  Далі дії в редакторі: 
					  - якщо потрібно змінити коментар, замість pick пишемо edit в тому коміті, комент якого хочемо відредагувати,
					  - можемо видалити коміт, або поміняти місцями (переписати в іншій послідовності).
					  Далі:
					  git commit --amend - міняємо комент зберігаємо і виходимо(якщо потрібно).
					  git rebase --continue

					  Також можна об'єднати коміти - замість pick пишемо squash (об'єднає цей коміт і попередній).

					  Або розділити коміт(наприклад передостанній), замість pick пишемо edit, в тому коміті, який хочемо розбити. 
					  Далі git reset HEAD^ (якщо це другий коміт), далі додаємо файли для першого коміту (git add),
					  робимо коміт, те саме для другого і т. д. скільки потрібно комітів.
					  git rebase --continue.
					  
					  ! Міняє SHA, тому не варто робити її, якщо коміти були відправлені на віддалений репозиторій.

-------------------------------------------------------------------------------------------------------------------------------

git cherry-pick C1 - додає даний коміт до поточної гілки. (С1 - хеш номер коміта)

-------------------------------------------------------------------------------------------------------------------------------

git rm test.txt - видаляє файл test.txt повністю і з комп'ютера і з гіта. Видалення попаде в індекс.
				  
git rm -f test.txt - видалить проіндексований файл.
				  
git rm --cached test.txt - видаляяє файл з гіт, але залишає на комп'ютері. 
						   Тобто файл буде виводитися як не контрольований (untracked).

-------------------------------------------------------------------------------------------------------------------------------

git mv test.txt new-name.txt - переіменовує файли. З test.txt на new-name.txt

-------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------

git clone https://github.com ... - клонує рерозиторій з github по URL адресі.
								Якщо після цієї команди через пробіл дадати назву папки, яку ми хочем наприклад my-project, 
								то репозиторій буде в папці з назвою my-project.

-------------------------------------------------------------------------------------------------------------------------------

git pull - забирає зміни з відаленого репозиторія і пробує злити (merge) їх з активною гілкою.

-------------------------------------------------------------------------------------------------------------------------------

Додавання віддаленого репозиторію:

git remote - виводить список віддалених сховищ (репозиторіїв).

git remote -v - виводить посилання на ці сховища.

git remote add [repo] [link] - додає віддалене сховище. ([repo] ім'я сховища [link] посилання)
							
git remote rename name-repo new-name-repo - переіменовує віддалений репозиторій, але тільки локально,
										    на сервері залишається стара назва.(?)
											В даному випадку name-repo на new-name-repo.
											
git remote rm repo - "видаляє" віддалений сервер.

*git remote set-url - змінює адресу url репозиторію.(неперевіряв)

-------------------------------------------------------------------------------------------------------------------------------
											
git fetch - отримує дані з віддаленого сховищана, але на відміну від git pull незливає зразу з вашою роботою і незмінює файли, 
			а стягує зміни на свої гілки. Ці зміни можна потім замержити вручну.

			https://gyazo.com/77f231e62e67d307b3cde6d72b4b1c3f
			
git fetch name-repo - стягує інформацію з репозиторія name-repo до себе в сховище.
					А також створює нову локальну гілку repo/master, яку можна злити (merge) з іншою, або лишити її.

-------------------------------------------------------------------------------------------------------------------------------

git push - штовхає зміни на сервер. Якщо хтось зробив зміни на сервері, то спочатку потрібно зробити git pull.

git push [ім’я сховища] [ім’я гілки] - наприклад  git push origin master - штовхає гілку master на сервер origin.
									  
git push -u origin master - те саме, що і попередня команда, але ключ -u запам'ятовує origin і master, тобто, 
							яку гілку на який репозиторій "пушити".	Тому наступного разу, якщо гілка і репозиторій ті самі,	
							можна використовувати просто git push.
									  
git push origin :my-branch - видаляє гілку my-branch на віддаленому репозиторії (на сервері). доповнити!

-------------------------------------------------------------------------------------------------------------------------------


git stash - приховує незавершену роботу. Наприклад ви зробили зміни в проекті і добавили в індекс, але ще не хочете коммітити
			незавершену роботу,	а потрібно переключитись на іншу, замість комміта використовують приховування, 
			до якого можна вернутися.
			
git stash list - виводить список прихованого.

git stash apply - вертає проект в стан на момент останнього приховування.
				Якщо було декілька приховувань, то потрібно добавити @{1}, або іншу цифру замість 1 (див. в git stash list).
				Наприклад - git stash apply@{2}
				
git stash drop stash@{0} - видаляє приховування.

git stash pop - приміняє сховані зміни і відразу видаляє приховування. 

git stash branch testchange - створює нову гілку на основі приховування. Гілка робиться з останнього комміта перед приховуванням
							і на ній зберігаються версія на момент приховування.

-------------------------------------------------------------------------------------------------------------------------------

gitk - виводить вікно для візуалізації.

-------------------------------------------------------------------------------------------------------------------------------

git tag - виводить список позначок. Зазвичай створюються, щоб відзначити релізи.

git tag -a v1.4 -m "my version v1.4" - створює анотовану(з інформацією - автор,	дата, коментар ...) позначку.
										
git push origin v1.4 - штовхає позначку v1.4 на сервер. Замість v1.4 можна написати --tags тоді запушаться всі позначки.

-------------------------------------------------------------------------------------------------------------------------------

.gitignore -  для того щоб git ігнорував файли, які не потрібно відстежувати і не показував в невідстежуваних, в корені 
			  створюється файл .gitignore, в якому записуються файли, які потрібно ігнорити.
			  Рядки, які починаються з # не враховуються і використовуються для коментів.
			  Приклади:
			
			  # Ніяких файлів з розширенням .a 
		      *.a

			  # Проте відстежувати lib.a, хоч ми й ігноруємо .a файли вище
			  !lib.a

			  # Ігнорувати тільки файл TODO у корені, не в інших теках
			  /TODO

			  # Ігнорувати усі файли в папці build
			  build/

			  # Ігнорувати усі .txt файли в папці doc/
			  doc/**/*.txt

-------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------